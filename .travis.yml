# TODO:
#
#  * restore previous sections
language: python

sudo: false
os:
  - linux

dist: xenial

env:
  global:
    - CHANS_DEV="-c pyviz/label/dev -c conda-forge"
    - CHANS_REL="-c pyviz/label/dev -c conda-forge"
    - LABELS_DEV="--label dev"
    - LABELS_REL="--label dev --label main"
    - PKG_TEST_PYTHON="--test-python=py36"
    # conda build fills up travis /tmp (tmpfs)
    - TMPDIR=$HOME/tmp
    - PYPI="pypi"
    - PYTHON_VERSION=3.7
    - OPTS="-o tests -o examples"

# quick hack to determine what tag is (improvements welcomed)
#     release: ^v(\d+|\.)*[^a-z]\d*$
# dev release: ^v(\d+|\.)*[a-z]\d*$

stages:
  - name: test
    if: tag =~ ^v(\d+|\.)+([a-z]|rc)?\d?$
  - name: conda_dev_package
    if: tag =~ ^v(\d+|\.)+([a-z]|rc)\d+$
  - name: pip_dev_package
    if: tag =~ ^v(\d+|\.)+([a-z]|rc)\d+$
  - name: conda_package
    if: tag =~ ^v(\d+|\.)+[^a-z]\d+$
  - name: pip_package
    if: tag =~ ^v(\d+|\.)+[^a-z]\d+$
  - name: docs
    if: tag =~ ^v(\d+|\.)+[^a-z]\d+$
  - name: docs_dev
    if: ((tag =~ ^v(\d+|\.)+([a-z]|rc)\d+$) OR (type = cron and branch = master) OR (commit_message =~ /\[doc-build\]/))

jobs:
  include:

    ########## DEVELOPER INSTALL ##########

    - &default
      stage: test
      env: DESC="dev test_all"
      before_install:
        # install doit/pyctdev and use to install miniconda...
        - pip install pyctdev && doit miniconda_install && pip uninstall -y doit pyctdev
        - export PATH="$HOME/miniconda/bin:$PATH" && hash -r
        - conda config --set always_yes True
        # ...and now install doit/pyctdev into miniconda
        - conda install -c pyviz "pyctdev>=0.5" && doit ecosystem_setup
      install:
        - doit env_create $CHANS_DEV --python=$PYTHON_VERSION --name=$PYTHON_VERSION
        - source activate $PYTHON_VERSION
        - doit develop_install $CHANS_DEV $OPTS
        - doit env_capture
      script:
        - doit test_all
      after_success: codecov

    ########## END-USER PACKAGES ##########

    ## dev packages

    - &pip_pkg
      <<: *default
      stage: pip_dev_package
      env: PYPIUSER=$PPU PYPIPASS=$PPP TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install:
        - doit env_create $CHANS_DEV --python=$PYTHON_VERSION
        - source activate test-environment
        - doit develop_install $CHANS_DEV -o tests
        - doit pip_on_conda
        - doit ecosystem=pip package_build --test-python=py36 --test-group=unit
      script: doit ecosystem=pip package_upload -u $PYPIUSER -p $PYPIPASS --pypi ${PYPI}

    - &conda_pkg
      <<: *default
      stage: conda_dev_package
      env: DESC="" LABELS=$LABELS_DEV CHANS=$CHANS_DEV TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install: doit package_build $CHANS $PKG_TEST_PYTHON --test-group=all
      script: doit package_upload --token=$CONDA_UPLOAD_TOKEN $LABELS

    ## release packages

    - <<: *pip_pkg
      env: PYPIUSER=$PPU PYPIPASS=$PPP TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      stage: pip_package

    - <<: *conda_pkg
      stage: conda_package
      env: DESC="" LABELS=$LABELS_REL CHANS=$CHANS_REL TRAVIS_NOCACHE=$TRAVIS_JOB_ID

    ########## DOCS ##########

    - &doc_build
      <<: *default
      stage: docs
      env: DESC="docs"
      script:
        - doit develop_install $CHANS_DEV -o doc -o examples
        - cd docs
        - make html
        - touch ./_build/html/.nojekyll
      deploy:
        - provider: pages
          skip_cleanup: true
          github_token: $GITHUB_TOKEN
          local_dir: ./docs/_build/html
          fqdn: lumen.holoviz.org
          on:
            tags: true
            all_branches: true
      after_failure:
        - cat /tmp/sphinx*
        - sleep 10

    - <<: *doc_build
      stage: docs_dev
      deploy:
        provider: pages
        skip_cleanup: true
        github_token: $GITHUB_TOKEN
        local_dir: ./docs/_build/html
        repo: pyviz-dev/lumen
        on:
          all_branches: true

notifications:
  email: false
